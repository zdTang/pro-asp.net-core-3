# Action Filter Approach Three
  override filter methods within Controller directly!
  Two methods can be overrided.  one will run before invoking Action. Another will run after invoking Action
  Can override either methods or both of them.

# Exception Filter
  Try the code, very beautiful, can handle the Exception!
# Manage the Filter Lifecycle

# Using DI scope to manage Filter Lifecycles
  1. what is scope?
  2. AddScoped() means one scope only create one instance.
  3. In the second screen, even through I used 3 browsers, but they all come from the same machine, the requests are same.   same IP..

# Global filter
  Notice the "HttpsOnly" filter will generate a Result,  which will be filtered by "GuidResponse" result filter.  so that need to comment "GuidResponse"

# Change the Filter Order
  1. Use "Order" property  -1,0,1,2,3  sequential order
  2. the Attribute must inherit "IOrderedFilter" interface

# use Options Pattern to configure middleware
  1, Define a default option class and assign default valut
  2, Reference this Option object and update the value based on our logic and use case.

# 21 controller and Views
  To using MVC, we need to add extra Services.
  services.AddControllers() can support WebAPI, but it don't support MVC,   Razor view or Razor page.

# 21. Shared View
  by Convention, View engine will search VIEW from those folders: Views--[ControllerNameFolder],Views--[Shared]

# 21   Generated View Class
     Action => Action Result => View Class => HTML Response

# 21 _ViewImport.cshtml,   This file is in the "Views" folder other than "Shared" folder.

#    @(Model.Price * 2).   Notice how to use ()

#    @:Static code  ==  this synatx can reference literal or static code

# 21 Enumerating Sequence
  1, for those result from Database, using @model IEnumerable<Product> as binding data model

# 22 ViewBag 
  cannot check if data type is correct or not

# 22 ViewData and Layout
  Defination of viewData:  public ViewDataDictionary<TModel> ViewData { get; set; }

# 22 ViewBag pass data to Layout
   viewBay defination: public dynamic ViewBag => ViewContext?.ViewBag;
   ??, ??= The null-coalescing operator ?? returns the value of its left-hand operand if it isn't null; otherwise, 
           it evaluates the right-hand operand and returns its result. 
           The ?? operator doesn't evaluate its right-hand operand if the left-hand operand evaluates to non-null.

# 22 ViewBag data precedence
  ViewBag is dynamic data type, using one property, it can be assign several times. the later assignment will override the previous one.

# 22, List.cshtml have all html element, so that it need not Layout,  just set Layout=null
      use @section to specify location in the layout file

# 22ï¼Œusing Partial View
      1, using partial view need enable tag-helper in the ViewImport file
      2, partial view is just normal View file. The difference is how to use it.
      3, Can use "model" and "view-data" to pass data to partial view.

#  5  read-only approach one
       [Constructor + optional parameter] {get;}
      1, The value of read-only peoperty can only be changed via Constructor or initializer
      2, We can set a default value via Constructor
      3, We can also set a default value via default value

#  5   read-only approach two ---don't use [Constructor + optional parameter] to init readonly
                {get; init;} ===> can use initializer
                {get;}       ===> cannot use initializer

#  6  Test
      Moq Documentation: https://documentation.help/Moq/
      
#  6  Test One
      Test passed, but it is useless! also, it used its dependency.

#  6  Unit Testing - using a fake implementation of the IDataSource. lets us using any test data other than real data.

# 7  Connect to localDB
     https://stackoverflow.com/questions/12534454/how-to-connect-to-localdb

# 7  Migration  + Seeding : approach one
     using IApplicationBuilder to get DbContext object, let me try if I can use DI to access DbContext

# 7  Migration  + Seeding : approach two
     using DI to access DbContext instance. this approach works too !

# 7  Migration  + Seeding : approach three
     using IApplicationBuilder to get DbContext object
     used a bunch of asynchronous method to operate Database.
     Should use "await" to make operations sequentially. create database--create-table--seeding....   this order
     if don't use "await",  the order will be a mess.   that's wahy error happened.

#7   Create a tag helper to be used for creating Pagination
     1, Create tag helper: be aware the tagFactory has been registed by the framework already
     2, Added a middleware to display all available registed services.(https://ardalis.com/how-to-list-all-services-available-to-an-asp-net-core-app/)
     3, Understand the pagination: what are in the nutshell.   
           a.  Data Model to display page information
           b,  Page number represented with <a> and <href> can pass different page number with URL( Get request)
           c,  In the action, can generate different ViewModel based on the Page Number

#    Change from QueryString to a new Route
     How the new URL changed automatically???? -- we should understand how the TagHelper works

# 8  1, unit test for filter --- vert important!
     2, ViewResult is derived from ActionResult
     3, changed Database to remote database on other computer--> Be care of the ConnectionString

#8   Refining the URL
     1, How are URLs mapping the specified Actions.. 
     2, How Tag Helper IUrlHeper interface provide URL-generating functions
     3, This tag helper is complex, try to understand it.

#8   The logic under the "Add to Cart" button.
     For each item, there are two hidden input items come with it. 
     notice the returURL, It is created by a extension method: Request.PathAndQuery(), is is a good approach?

#8   Unit test, Mock Session
     Try to understand how to mock Get Property, and how to use callback.


# 9  a.Try to read the text book one more time
     b.Understand AddScoped<T>, and AddSingleton<T,Y>
     c.Be familiar with using AddScoped<T>() to return a Service, and we will use this Service anywhere in the project, and the Service we request
     is always the same one.



# 9  updating the unit test
     Using service simplifies the testing process greatly.
	 
# 9 Creating the view component class and view
    1, Adding Font awesome
	2, Creating the view component --- view component is very powerful!
	
[Chapter9- p229]- Completing the Order Controller
    front-end validation and back end validation has not implement!
	
[Chapter9- p232]- Displaying Validation Errors

    The server-side validation:   
	no javascript-validation libraries have been added to the View
	During Type-binding, The ModelState find Error and the Controller return the View with Error Message.(No model need to be passed to View)

[Chapter 9]

    I added client-side validation.
	1, add-validation for each field ( asp-validation, asp-for, Attribute on the Model field)
	2, with client-side validation, if error happens, the submit will not be triggered.

[chapter 19]

Using MVC to create Web service endpoint will save lot of time.
The framework will handle StatusCode, contentType for us
We don't need serialize manually. the framework will handle this for us.